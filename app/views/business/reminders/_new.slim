- action_path = @action_path
- remote_business = remote_business ? "@business, " : ""

.bootbox-heading
  - if params[:action] == "edit"
    | Edit Task
  - if params[:action] == "new"
    | New Task
  hr.m-b-1
/.padded-checkboxes.reactive_reminders.reminders_table.m-t-2.m-b-2
  /- @business.reminders.where(remind_at: @parsed_date).order(id: :asc).each do |reminder|
    = check_box_tag("reminder_popup_#{reminder.id}", 1, !reminder.done_at.nil?)
    - pth = current_business ? new_business_reminder_path(date: reminder.remind_at) : new_specialists_business_reminder_path(@business.username, date: reminder.remind_at)
    label for=("reminder_popup_#{reminder.id}") class="css-label" style="width: 100%;"
      .upcoming_task style="line-height: 14px;"
        div style="position:relative;" class=("done" if reminder.done_at.present?) 
          = reminder.body
          = link_to "", (current_specialist ? specialists_business_reminder_path(@business.username, reminder) : business_reminder_path(reminder)), method: :delete, class: "icon-close"
    .clearfix
/- pth = (current_specialist ? specialists_business_reminders_path(@business.username) : business_reminders_path)
/- if params[:action] == "edit"
/  - pth = (current_specialist ? specialists_business_reminder_path(@business.username, @reminder) : business_reminder_path(@reminder))


= simple_form_for @reminder, wrapper: :inline_form, url: action_path do |f|
  .text-danger = f.object.errors.full_messages.first if f.object.errors.any?

  .col-md-12.p-x-0
    = f.input :body
  .col-md-6.p-l-0
    = f.input :remind_at, required: true, as: :string, input_html: { \
      class: 'input-lg js-datepicker date', \
      data: { \
        value: (l(f.object.remind_at, format: :pickadate) if f.object.remind_at) \
      } \
    }

  .col-md-6.p-r-0
    = f.input :end_date, required: true, as: :string, input_html: { \
      class: 'input-lg js-datepicker date', \
      data: {\
        min: [2020,6,23], \
        'date-to' => true, \
        value: (l(f.object.end_date, format: :pickadate) if f.object.end_date.present?) \
                    } \
    }
  .col-md-12.text-center
    = f.submit f.object.new_record? ? "Add Task" : "Edit Task", class: "btn btn-primary p-x-3 m-t-1 m-b-1"
    - unless f.object.new_record?
      = link_to 'Delete', business_reminder_path(f.object), class: "btn btn-primary p-x-3 m-t-1 m-b-1 m-l-2",
              remote: false,
              method: :delete,
              title: 'Confirm Deletion',
              data: {confirm: "<div class='bootbox-heading'>Delete Task<hr></div><div class='p-x-3'>Are you sure you want to delete this task?</div>", confirm_label: 'Confirm', no_cancel: true}
  .clearfix
javascript:
  var reactive_reminders = true;
  // if (typeof (attach_js_datepicker) != "undefined") {
  //     attach_js_datepicker($(".modal-body"));
  // }
  var from_$input = $('#reminder_remind_at').pickadate({
          format: $(this).data('format') || 'mmmm d, yyyy',
          formatSubmit: 'yyyy-mm-dd',
          hiddenName: true,
      }),
      from_picker = from_$input.pickadate('picker')

  var to_$input = $('#reminder_end_date').pickadate({
          format: $(this).data('format') || 'mmmm d, yyyy',
          formatSubmit: 'yyyy-mm-dd',
          hiddenName: true,
      }),
      to_picker = to_$input.pickadate('picker')


  // Check if there’s a “from” or “to” date to start with.
  if (from_picker.get('value')) {
      to_picker.set('min', from_picker.get('select'))

  }
  // if (to_picker.get('value')) {
  //     from_picker.set('max', to_picker.get('select'))
  // }
  // When something is selected, update the “from” and “to” limits.
  from_picker.on('set', function (event) {

      if (event.select) {
          to_picker.set('min', from_picker.get('select'))
      } else if ('clear' in event) {
          to_picker.set('min', false)
      }

  })

  to_picker.on('set', function (event) {
      if (event.select) {
          from_picker.set('max', to_picker.get('select'))
      } else if ('clear' in event) {
          from_picker.set('max', false)
      }
  })

